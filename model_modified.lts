/**
 * Modified model of the questing knights simulator
 *
 * @author Omja Das <835780>
 */

// default values
const AGENDA_SIZE = 1
const NUM_KNIGHTS = 4

// boolean values
const FALSE = 0
const TRUE = 1
range BOOL = FALSE..TRUE

// king process
KING = (
    king_enter ->
    start_meeting ->
    end_meeting ->
    king_exit ->
    KING
).

// knight process
KNIGHT = (
    knight_enter ->
    knight_sit ->
    complete.produce_quest ->
    new.consume_quest ->
    knight_stand ->
    knight_exit ->
    questing ->
    KNIGHT
).

// producer process
PRODUCER = ( new.produce_quest -> PRODUCER ).

// consumer process
CONSUMER = ( complete.consume_quest -> CONSUMER ).

/**
 * @param N number of knights in the simulation
 */
HALL(N=NUM_KNIGHTS) = HALL[FALSE][0][0],
/**
 * a whether the king is present
 * k number of knights present in the hall
 * s number of knights sitting at the table
 */
HALL[a:BOOL][k:0..N][s:0..N] = ( 
    // knights can sit and stand whenever they like
    k[i:1..N].knight_sit -> HALL[a][k][s+1] |
    k[i:1..N].knight_stand -> HALL[a][k][s-1] |

    // the king can enter and exit whenever he likes
    king_enter -> HALL[TRUE][k][s] |

    // the king can only exit once all of the knights have exited
    when (k==0) king_exit -> HALL[FALSE][k][s] |

    // allow the meeting to start when all present knights are sitting
    when (s==k) start_meeting -> HALL[a][k][s] |

    // allow the meeting to end when all knights have stood up
    when (s==0) end_meeting -> HALL[a][k][s] |

    // allow knights to enter when the king is not present
    when (a==FALSE) k[i:1..N].knight_enter -> HALL[a][k+1][s] |

    // knights can exit whenever the like
    k[i:1..N].knight_exit -> HALL[a][k-1][s]
).

/**
 * @param N number of knights in the simulation
 */
property SAFE_HALL(N=NUM_KNIGHTS) = (
    king_enter ->
    start_meeting -> 
    end_meeting -> 
    king_exit ->
    SAFE_HALL
).

/**
 * @param N number of knights in the simulation
 */
||CHECK_HALL(N=NUM_KNIGHTS) = (HALL(N) || SAFE_HALL(N)).

/**
 * @param N number of knights in the simulation
 */
MEETING(N=NUM_KNIGHTS) = MEETING[FALSE],
/**
 * m whether a meeting is in progress
 */
MEETING[m:BOOL] = (
    start_meeting -> MEETING[TRUE] |
    end_meeting -> MEETING[FALSE] |

    // allow knigts to release and acquire quests while a meeting is in progress
    when (m==TRUE) k[i:1..N].complete.produce_quest -> MEETING[m] |
    when (m==TRUE) k[i:1..N].new.consume_quest -> MEETING[m]
).

// check that meetings start before they end
property SAFE_MEETING = (start_meeting -> end_meeting -> SAFE_MEETING).

/**
 * @param N number of knights in the simulation
 */
||CHECK_MEETING(N=NUM_KNIGHTS) = (MEETING(N) || SAFE_MEETING).

/**
 * @param N number of quests the agenda can hold
 */
AGENDA(N=AGENDA_SIZE) = AGENDA[0],
/**
 * i number of quests currently in the agenda
 */
AGENDA[i:0..N] = (
    // allow quests to be produced when there is space in the agenda
    when (i<N) produce_quest -> AGENDA[i+1] |

    // allow quests to be consumed when there are quests in the agenda
    when (i>0) consume_quest -> AGENDA[i-1]
).

// only holds when agenda size is 1
property SAFE_AGENDA = (produce_quest -> consume_quest -> SAFE_AGENDA).

/**
 * @param N number of quests the agenda can hold
 */
||CHECK_AGENDA(N=AGENDA_SIZE) = (AGENDA(N) || SAFE_AGENDA).

/**
 * create all of the knights
 *
 * @param N number of knights
 */
||KNIGHTS(N=NUM_KNIGHTS) = (k[i:1..N]:KNIGHT).

/**
 * @param N number of knights in the simulation
 * @param A size of the agendas
 */
||SIMULATION(N=NUM_KNIGHTS,A=AGENDA_SIZE) = (
    KING ||
    KNIGHTS(N) ||
    {k[i:1..N]}::PRODUCER ||
    {k[i:1..N]}::CONSUMER ||
    {k[i:1..N]}::new:CHECK_AGENDA(A) ||
    {k[i:1..N]}::complete:CHECK_AGENDA(A) ||
    CHECK_HALL(N) ||
    CHECK_MEETING(N)
).

// check that the king continues to enter and exit the hall
progress KING_ENTER = {king_enter}
progress KING_EXIT = {king_exit}

// check that knights continue to enter and exit the hall
progress KNIGHT_ENTER = {k[i:1..NUM_KNIGHTS].knight_enter}
progress KNIGHT_EXIT = {k[i:1..NUM_KNIGHTS].knight_exit}

// check that meetings continue to start and end
progress START_MEETING = {start_meeting}
progress ENG_MEETING = {end_meeting}

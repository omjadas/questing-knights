const AGENDA_SIZE = 1
const NUM_KNIGHTS = 4
const FALSE = 0
const TRUE = 1
range BOOL = FALSE..TRUE

KING = (
    king_enter ->
    start_meeting ->
    end_meeting ->
    king_exit ->
    KING
).
KNIGHT = (
    knight_enter ->
    knight_sit ->
    complete.produce_quest ->
    new.consume_quest ->
    knight_stand ->
    knight_exit ->
    questing ->
    KNIGHT
).
PRODUCER = ( new.produce_quest -> PRODUCER ).
CONSUMER = ( complete.consume_quest -> CONSUMER ).

HALL = HA[FALSE][0][0],
HA[a:BOOL][k:0..NUM_KNIGHTS][s:0..NUM_KNIGHTS] = (
    k[i:1..NUM_KNIGHTS].knight_sit -> HA[a][k][s+1] |
    k[i:1..NUM_KNIGHTS].knight_stand -> HA[a][k][s-1] |
    when (s==0) end_meeting -> HA[a][k][s] |
    when (s==k) start_meeting -> HA[a][k][s] |
    when (a==FALSE) k[i:1..NUM_KNIGHTS].knight_enter -> HA[a][k+1][s] |
    when (a==FALSE) k[i:1..NUM_KNIGHTS].knight_exit -> HA[a][k-1][s] |
    when (a==FALSE) king_enter -> HA[TRUE][k][s] |
    when (a==TRUE) king_exit -> HA[FALSE][k][s]
).

MEETING = ME[FALSE],
ME[m:BOOL] = (
    start_meeting -> ME[TRUE] |
    end_meeting -> ME[FALSE] |
    when (m==TRUE) k[i:1..NUM_KNIGHTS].complete.produce_quest -> ME[m] |
    when (m==TRUE) k[i:1..NUM_KNIGHTS].new.consume_quest -> ME[m]
).

AGENDA(N=AGENDA_SIZE) = COUNT[0],
COUNT[i:0..N] = (
    when (i<N) produce_quest -> COUNT[i+1] |
    when (i>0) consume_quest -> COUNT[i-1]
).

||KNIGHTS(N=NUM_KNIGHTS) = (k[i:1..N]:KNIGHT).

||SYSTEM = (
    KING ||
    KNIGHTS(NUM_KNIGHTS) ||
    {k[i:1..NUM_KNIGHTS]}::PRODUCER ||
    {k[i:1..NUM_KNIGHTS]}::CONSUMER ||
    {k[i:1..NUM_KNIGHTS]}::new:AGENDA(AGENDA_SIZE) ||
    {k[i:1..NUM_KNIGHTS]}::complete:AGENDA(AGENDA_SIZE) ||
    HALL ||
    MEETING
).
